// Copyright

/*=============================================================================
	TextureBaker\ImageUtilities.usf: Various shader tools helps to process 
	images.
=============================================================================*/

#include "/Engine/Public/Platform.ush"

void ImageScalerMainVS(
	in uint GlobalVertexId : SV_VertexID,
	out float2 OutVertexDistortedViewportUV : TEXCOORD0,
	out float4 OutPosition : SV_POSITION
	)
{
	// Compute the cell index.
	uint GridCellIndex = GlobalVertexId / 6;

	// Compute row and column id of the cell within the grid.
	uint GridColumnId = GridCellIndex / GRID_SUBDIVISION_Y;
	uint GridRowId = GridCellIndex - GridColumnId * GRID_SUBDIVISION_Y;

	// Compute the vertex id within a 2 triangles grid cell.
	uint VertexId = GlobalVertexId - GridCellIndex * 6;

	// Compute the bottom left originated UV coordinate of the triangle's vertex within the cell.
	float2 CellVertexUV = float2(0x1 & ((VertexId + 1) / 3), VertexId & 0x1);

	// Compute the top left originated UV of the vertex within the grid.
	float2 GridInvSize = 1.f / float2(GRID_SUBDIVISION_X, GRID_SUBDIVISION_Y);
	float2 GridVertexUV = FlipUV(
		GridInvSize * (CellVertexUV + float2(GridColumnId, GridRowId)));

	// The standard doesn't have half pixel shift.
	GridVertexUV -= PixelUVSize * 0.5;

	// Output vertex position.
	OutPosition = float4(FlipUV(
		UndistortViewportUV(GridVertexUV) + PixelUVSize * 0.5) * 2 - 1, 0, 1);

	// Output top left originated UV of the vertex.
	OutVertexDistortedViewportUV = GridVertexUV;
}


void ImageScalerMainPS(
	in noperspective float2 VertexDistortedViewportUV : TEXCOORD0,
	in float4 SvPosition : SV_POSITION,
	out float4 OutColor : SV_Target0
	)
{
	// Compute the pixel's top left originated UV.
	float2 ViewportUV = SvPosition.xy * PixelUVSize;

	// The standard doesn't have half pixel shift.
	ViewportUV -= PixelUVSize * 0.5;

	float2 DistortUVtoUndistortUV = (UndistortViewportUV((ViewportUV))) - ViewportUV;
	float2 UndistortUVtoDistortUV = VertexDistortedViewportUV - ViewportUV;

	// Output displacement channels.
	OutColor = OutputMultiplyAndAdd.y + OutputMultiplyAndAdd.x * float4(
		DistortUVtoUndistortUV, UndistortUVtoDistortUV);
}
